"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient ",$\rho$," = 0","\n",
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient ",$\rho$," = 0","\n",
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient ",\rho," = 0","\n",
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient ",expression(mu)," = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient \U+03C1 = 0","\n",
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient  = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient \U03B1 = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient \U03C1 = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient ", knitr::asis_output("\rho")," = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient ",knitr::asis_output("\U03C1")," = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#4. Produce a Quantile-Quantile plot with reference to a Weibull distribution
#with shape parameter 1.5 and scale parameter 5
# a. set the parameters of the shape and scale
wshape = 1.5
wscale = 5
# b. plot Q-Q plot.
#first parameter is the generated by the Weibull distribution our theorical distribution.
#The second parameters is our data that we intend to compare it with.
qqplot(qweibull(ppoints(length(t_fail)), shape = wshape, scale = wscale), t_fail,
main = "Weibull Q-Q plot", xlab = "Theorical Quantiles",
ylab = "Sample Quantiles")
# c. plot the qqline.
#This function will create the appropriate reference line for our data and
#the Weibull distribution given as first and second parameter respectively.
qqline(t_fail, distribution = function(p)
qweibull(p, shape = wshape, scale = wscale), col = 2)
#import packages
library(ggplot2)
library(gridExtra)
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's
coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient \U03C1 = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
?expression
#a. weibull parameters
wshape = 3
wscale = 0.2
#b. identify the boundaries of the distribution
wmin = qweibull(0, shape=wshape, scale = wscale) # min as the quantile 0
wmax = qweibull(0.9999, shape=wshape, scale = wscale) # max as the quantile 99.99%
#c. Generate plots for the Weibull function
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dweibull, args = list(shape=wshape, scale = wscale),
size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(
fun = function(x) 1-pweibull (x, shape=wshape, scale = wscale),
size = 1 , colour = "red" )
#c.3. Set format parameters for both graphs
#c.3.1. create a variable name use as title on the plots
fun_name = expression(sprintf("Weibull(lambda=%s,k=%s)",wscale,wshape))
DensityFig <-
DensityFig + labs(title = paste(fun_name, "\n Probability Density Function"))+
xlim(wmin, wmax) +
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
SurvFig<-SurvFig +
xlim(wmin, wmax)  + labs(title = paste(fun_name, "\n Survivor Function"))+
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
#d. Plot both figures in the same grid
grid.arrange(DensityFig,SurvFig,ncol=2)
#a. weibull parameters
wshape = 3
wscale = 0.2
#b. identify the boundaries of the distribution
wmin = qweibull(0, shape=wshape, scale = wscale) # min as the quantile 0
wmax = qweibull(0.9999, shape=wshape, scale = wscale) # max as the quantile 99.99%
#c. Generate plots for the Weibull function
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dweibull, args = list(shape=wshape, scale = wscale),
size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(
fun = function(x) 1-pweibull (x, shape=wshape, scale = wscale),
size = 1 , colour = "red" )
#c.3. Set format parameters for both graphs
#c.3.1. create a variable name use as title on the plots
fun_name = sprintf(expression("Weibull(lambda=%s,k=%s))"),wscale,wshape))
#a. weibull parameters
wshape = 3
wscale = 0.2
#b. identify the boundaries of the distribution
wmin = qweibull(0, shape=wshape, scale = wscale) # min as the quantile 0
wmax = qweibull(0.9999, shape=wshape, scale = wscale) # max as the quantile 99.99%
#c. Generate plots for the Weibull function
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dweibull, args = list(shape=wshape, scale = wscale),
size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(
fun = function(x) 1-pweibull (x, shape=wshape, scale = wscale),
size = 1 , colour = "red" )
#c.3. Set format parameters for both graphs
#c.3.1. create a variable name use as title on the plots
fun_name = sprintf(expression("Weibull(lambda=%s,k=%s))"),wscale,wshape)
#a. weibull parameters
wshape = 3
wscale = 0.2
#b. identify the boundaries of the distribution
wmin = qweibull(0, shape=wshape, scale = wscale) # min as the quantile 0
wmax = qweibull(0.9999, shape=wshape, scale = wscale) # max as the quantile 99.99%
#c. Generate plots for the Weibull function
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dweibull, args = list(shape=wshape, scale = wscale),
size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(
fun = function(x) 1-pweibull (x, shape=wshape, scale = wscale),
size = 1 , colour = "red" )
#c.3. Set format parameters for both graphs
#c.3.1. create a variable name use as title on the plots
fun_name = sprintf("Weibull(\U03BB=%s,k=%s)",wscale,wshape)
DensityFig <-
DensityFig + labs(title = paste(fun_name, "\n Probability Density Function"))+
xlim(wmin, wmax) +
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
SurvFig<-SurvFig +
xlim(wmin, wmax)  + labs(title = paste(fun_name, "\n Survivor Function"))+
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
#d. Plot both figures in the same grid
grid.arrange(DensityFig,SurvFig,ncol=2)
#a. weibull parameters
wshape = 3
wscale = 0.2
#b. identify the boundaries of the distribution
wmin = qweibull(0, shape=wshape, scale = wscale) # min as the quantile 0
wmax = qweibull(0.9999, shape=wshape, scale = wscale) # max as the quantile 99.99%
#c. Generate plots for the Weibull function
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dweibull, args = list(shape=wshape, scale = wscale),
size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(
fun = function(x) 1-pweibull (x, shape=wshape, scale = wscale),
size = 1 , colour = "red" )
#c.3. Set format parameters for both graphs
#c.3.1. create a variable name use as title on the plots
fun_name = sprintf("Weibull(\U03BB=%s,k=%s)",wscale,wshape)
DensityFig <-
DensityFig + labs(title = paste(fun_name, "\n Probability Density Function"))+
xlim(wmin, wmax) +
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
SurvFig<-SurvFig +
xlim(wmin, wmax)  + labs(title = paste(fun_name, "\n Survivor Function"))+
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
#d. Plot both figures in the same grid
grid.arrange(DensityFig,SurvFig,ncol=2)
#a. weibull parameters
wshape = 3
wscale = 0.2
#b. identify the boundaries of the distribution
wmin = qweibull(0, shape=wshape, scale = wscale) # min as the quantile 0
wmax = qweibull(0.9999, shape=wshape, scale = wscale) # max as the quantile 99.99%
#c. Generate plots for the Weibull function
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dweibull, args = list(shape=wshape, scale = wscale),
size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(
fun = function(x) 1-pweibull (x, shape=wshape, scale = wscale),
size = 1 , colour = "red" )
#c.3. Set format parameters for both graphs
#c.3.1. create a variable name use as title on the plots
fun_name = sprintf("Weibull(scale=%s,shape=%s)",wscale,wshape)
DensityFig <-
DensityFig + labs(title = paste(fun_name, "\n Probability Density Function"))+
xlim(wmin, wmax) +
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
SurvFig<-SurvFig +
xlim(wmin, wmax)  + labs(title = paste(fun_name, "\n Survivor Function"))+
labs( x ="", y="Density") + theme(plot.title = element_text(hjust = 0.5))
#d. Plot both figures in the same grid
grid.arrange(DensityFig,SurvFig,ncol=2)
# 1. read the data
t_fail<-scan("lights.dat")
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
print(cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n",
"proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%  \n",
sep = ""))
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
print(cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n",
"proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%  \n",    sep = ""))
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
print(cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n",
"proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%",    sep = ""))
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
print(cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n",
"proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%",sep = ""))
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
print(cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n")
cat("proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%",sep = ""))
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n",
"proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%",sep = "")
# 2. summary of the data
prop = sum(t_fail>=5)/# numerator: sum of cases where t_fail is >= 5 ( thousands of hours)
length(t_fail) # divisor: total of observations
# print outputs. Each line enunciates  what each functions does
cat("Description of the data set","  \n  \n",
"Number of observations in the dataset              : ",length(t_fail),"  \n",
"Mean of dataset                                    : ",mean(t_fail),"  \n",
"Standard deviation of dataset                      : ", sd(t_fail) ,"  \n",
"proportion of lights surviving beyond 5,000 hours  : ", round(prop*100,2),"%",
sep = "")
## Modify the parameters that are manually needed to perform the analyses
# select the variables  to analyse
x= ecoUSA$EXPEND
y= ecoUSA$MET
n= as.integer(length(x)) # number of observations. This will be use later.
alpha =0.05 # state the alpha for the confidence interval. This will be use later.
txtlabs= c("Test statistic", "P value") # a list that will be use to print results
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's
coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient rho = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
# Fischers Z transform statistic using formulas given
Zfisher = 1/2 * log((1+r)/(1-r))
Zmean = 1/2 * log((1+0)/(1-0))
Zvar=1/(n-3)
### Eval for H0 \ro=0 as N(Zmean,Zvar) => get p value
pval=2*pnorm(-abs(Zfisher),mean = Zmean, sd = sqrt(Zvar))
### create a CI for with  95% confidence interval for \ro
CI_inf <- Zfisher-qnorm(1-alpha/2)*sqrt(Zvar) # inferior  bound in the statistc dim.
CI_inf <- (exp(2*CI_inf)-1)/(exp(2*CI_inf)+1) # transform to \rho
CI_sup <- Zfisher+qnorm(1-alpha/2)*sqrt(Zvar)# superior  bound in the statistic dim.
CI_sup <- (exp(2*CI_sup)-1)/(exp(2*CI_sup)+1) # transform to \rho
# print outputs
cat("Analysis  of no association between variables using Fisher's z-transform", "\n",
"\n", "Approximate two-side-test for ",
"H0: correlation coefficient rho = 0","\n",
"Pearson's correlation (r): ", r ,"\n",
txtlabs[1]," : ", Zfisher ,"\n",
txtlabs[2],"        : ", pval ,"\n",
"\n", "95% confidence interval for rho","\n",
"[",CI_inf,",",CI_sup,"]", "\n")
#a. calculate Spearman's coefficient of rank correlation rs
xs= rank(x) # rank values of variable x
ys= rank(y) # rank values of variable y
rs = sum((xs-mean(xs))*(ys-mean(ys)))/
(sum((xs-mean(xs))^2)*sum((ys-mean(ys))^2))^(1/2) # compute Spearman coeficient
#b. Spearman statistic
Ts =  rs*(n-2)^0.5/(1-rs^2)^0.5 # calculate statistic
pval=2*pt(-abs(Ts),df=n-2) # Eval "Ts" in t-student n-2 / get p value
#print outputs
cat("Analysis  of no association between variables using Spearman's
coefficient of rank correlation (rs)", "\n",
"\n", "Approximate two-side-test for ",
"H0: X and Y are independent","\n",
"Spearman's correlation (rs): ", rs ,"\n",
txtlabs[1]," : ", Ts ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dnorm, size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = function(x) 1-pnorm ,size = 1 , colour = "red" )
grid.arrange(DensityFig,SurvFig,ncol=2)
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = function(x) 1-pnorm() ,size = 1 , colour = "red" )
grid.arrange(DensityFig,SurvFig,ncol=2)
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = function(x) 1-pnorm() ,size = 1 , colour = "red" )
grid.arrange(DensityFig,SurvFig,ncol=2)
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = pnorm ,size = 1 , colour = "red" )
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dnorm, size = 1 , color = "blue" )
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = pnorm ,size = 1 , colour = "red" )
grid.arrange(DensityFig,SurvFig,ncol=2)
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dnorm, size = 1 , color = "blue" ) + xlim(-1,1)
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = pnorm ,size = 1 , colour = "red" ) +xlim(-1,1)
grid.arrange(DensityFig,SurvFig,ncol=2)
#c.1 Generate the density plot for the Weibull function
DensityFig <- ggplot() +
stat_function(fun = dnorm, size = 1 , color = "blue" ) + xlim(-5,5)
#c.2 Generate the Survivot function plot for he Weibull function
SurvFig <- ggplot() +
stat_function(fun = pnorm ,size = 1 , colour = "red" ) +xlim(-5,5)
grid.arrange(DensityFig,SurvFig,ncol=2)
#import packages
library(ggplot2)
library(gridExtra)
#Load Data
ecoUSA<-read.table("spe.dat", header = TRUE)
#plot pair of varibles
pairs(ecoUSA[,1:6], main = "Fig 1. Pairs plot of state and local public expenditures
per capita \n and state characteristics in the USA for 1960")
## Modify the parameters that are manually needed to perform the analyses
# select the variables  to analyse
x= ecoUSA$EXPEND
y= ecoUSA$ECAB
n= as.integer(length(x)) # number of observations. This will be use later.
alpha =0.05 # state the alpha for the confidence interval. This will be use later.
txtlabs= c("Test statistic", "P value") # a list that will be use to print results
#Pearson's coefficient of correlation r
r = sum((x-mean(x))*(y-mean(y)))/
(sum((x-mean(x))^2)*sum((y-mean(y))^2))^(1/2)
# T statistic
Tp = r*(n-2)^0.5/(1-r^2)^0.5
### Eval "Tp" in t-student n-2 to get p value
pval=2*pt(-abs(Tp),df=n-2)
# print outputs
cat("Analysis  of no association between variables using Pearson's
coefficient of correlation r", "\n",
"Pearson's correlation (r): ", r ,"\n",
"\n", "Two side-test for ",
"H0: correlation coefficient rho = 0","\n",
txtlabs[1]," : ", Tp ,"\n",
txtlabs[2],"        : ", pval ,"\n", sep = "")
?pt
2*pnorm(-0.14)
5*sqrt(10)
5*sqrt(10)*1.5
2*pnorm(0.14)
2*pnorm(-0.14)
qt(0.05,df=9)
qt(0.025,df=9)
qt(c(0.025,0.5,0.975),df=9)
qt(c(0.025,0.05,0.975),df=9)
