"0","set.seed(12345)"
"0","#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns "
"0","#of iris"
"0","M=2 # nubmer of latent factors"
"0","K=3 # number of clusters"
"0","#mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = ""unique"", "
"0","#             D_type = ""common"",nkmeans = 3, nrandom = 0)"
"0",""
"0","#a.2. extract all the corresponding parameters of the fitted model, to simulate data based"
"0","#on the model. Program simulation of Y and epsilon"
"0",""
"0","#' @param N, the number of samples"
"0","#' @param mfa_model, the output of a call to mfa."
"0","#' @return N x J matrix of simulated samples from mfa_model."
"0","simulate_mfa <- function(N, mfa_model){"
"0","  mu<-mfa_model$mu  #Jx1 xK = 4x3"
"0","  B<-mfa_model$B    #JxM xK = 4x2x3"
"0","  D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1"
"0","  pi_prob<-mfa_model$pivec #1 xK = 1x3"
"0","  "
"0","  M<-mfa_model$q # number of latent factors"
"0","  K<-mfa_model$g # number of clusters"
"0","  J<-nrow(mu) #number of orginal atributes  "
"0","  "
"0","  z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)"
"0","  X = matrix(nrow = N,ncol =J )"
"0","  for (i in (1:N)){"
"0","    #print(i)"
"0","    zi <- z[i]"
"0","    Y <- rnorm(M)"
"0","    error <- rnorm(J,sd=D)"
"0","    X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error"
"0","  }"
"0","  return(X)"
"0","}"
"0",""
"0","#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same"
"0","#sample size as iris."
"0","N<-nrow(iris)"
"0","mfa.data_sim<-simulate_mfa(N,mfa_mod)"
"0",""
"0","#b. Visually compare the result of this simulation against the real data to provide an"
"0","#informal goodness-of-fit assessment."
"0","data_aux<-as.data.frame(mfa.data_sim)"
"0","colnames(data_aux)<-colnames(iris[,1:4])"
"0","data_aux<-rbind(iris[,1:4],data_aux)"
"0","data_aux<-cbind(data_aux,c(rep(""real"",N),rep(""simulated"",N)))"
"0","colnames(data_aux)[5]<-""data_source"""
"0",""
"0","# b.1. quantile-quantile plots "
"0","qq_plots<-list()"
"0","par(mfrow=c(2,2), tcl=-0.5, family=""serif"", omi=c(0.2,0.2,0,0), mai=c(0.3,0.3,0.5,0.2))"
"0","for (i in 1:4) {"
"0","  col<-colnames(data_aux)[i]"
"0","  simulated <- filter(data_aux, data_source %in% c(""simulated"")) %>%  pull(col)"
"0","  real  <- filter(data_aux, data_source %in% c(""real"")) %>%  pull(col)"
"0","  qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste(""QQ-plot"", col))"
"0","  abline( c(0,1))"
"0","}"
