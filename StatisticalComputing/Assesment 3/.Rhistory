for (i in 1:4) {
col<-colnames(data_aux)[i]
simulated <- filter(data_aux, data_source %in% c("simulated")) %>%  pull(col)
real  <- filter(data_aux, data_source %in% c("real")) %>%  pull(col)
qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste("QQ-plot", col))
abline( c(0,1))
}
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
# b.2.scatterplots
par(mfrow=c(1,2))
plot(data_aux[,1:2], col = data_aux$data_source, pch = 20)
plot(data_aux[,c(3,4)], col = data_aux$data_source, pch = 20)
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
#mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
#             D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), mai = c(0.5,0.5,0.5,0.5))
for (i in 1:4) {
col<-colnames(data_aux)[i]
simulated <- filter(data_aux, data_source %in% c("simulated")) %>%  pull(col)
real  <- filter(data_aux, data_source %in% c("real")) %>%  pull(col)
qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste("QQ-plot", col))
abline( c(0,1))
}
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
# b.2.scatterplots
par(mfrow=c(1,2))
plot(data_aux[,1:2], col = data_aux$data_source, pch = 20)
plot(data_aux[,c(3,4)], col = data_aux$data_source, pch = 20)
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
#mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
#             D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.2,0.4,0.2,0.2))
for (i in 1:4) {
col<-colnames(data_aux)[i]
simulated <- filter(data_aux, data_source %in% c("simulated")) %>%  pull(col)
real  <- filter(data_aux, data_source %in% c("real")) %>%  pull(col)
qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste("QQ-plot", col))
abline( c(0,1))
}
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
mtext("Simulated", side=1, outer=T, at=0.5)
mtext("Ground truth", side=2, outer=T, at=0.5)
# b.2.scatterplots
par(mfrow=c(1,2))
plot(data_aux[,1:2], col = data_aux$data_source, pch = 20)
plot(data_aux[,c(3,4)], col = data_aux$data_source, pch = 20)
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
#mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
#             D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.4,0.4,0.4,0.4))
for (i in 1:4) {
col<-colnames(data_aux)[i]
simulated <- filter(data_aux, data_source %in% c("simulated")) %>%  pull(col)
real  <- filter(data_aux, data_source %in% c("real")) %>%  pull(col)
qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste("QQ-plot", col))
abline( c(0,1))
}
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
mtext("Ground truth", side=1, outer=T, at=0.5)
mtext("Simulated", side=2, outer=T, at=0.5)
# b.2.scatterplots
par(mfrow=c(1,2))
plot(data_aux[,1:2], col = data_aux$data_source, pch = 20)
plot(data_aux[,c(3,4)], col = data_aux$data_source, pch = 20)
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
#mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
#             D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.2,0.3,0.5,0.2))
for (i in 1:4) {
col<-colnames(data_aux)[i]
simulated <- filter(data_aux, data_source %in% c("simulated")) %>%  pull(col)
real  <- filter(data_aux, data_source %in% c("real")) %>%  pull(col)
qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste("QQ-plot", col))
abline( c(0,1))
}
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
mtext("Ground truth", side=1, outer=T, at=0.5)
mtext("Simulated", side=2, outer=T, at=0.5)
# b.2.scatterplots
par(mfrow=c(1,2))
plot(data_aux[,1:2], col = data_aux$data_source, pch = 20)
plot(data_aux[,c(3,4)], col = data_aux$data_source, pch = 20)
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
#mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
#             D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.3,0.3,0.5,0.2))
for (i in 1:4) {
col<-colnames(data_aux)[i]
simulated <- filter(data_aux, data_source %in% c("simulated")) %>%  pull(col)
real  <- filter(data_aux, data_source %in% c("real")) %>%  pull(col)
qq_plots[[i]]<-qqplot(x=real, y=simulated, asp=1, main = paste("QQ-plot", col))
abline( c(0,1))
}
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
mtext("Ground truth", side=1, outer=T, at=0.5)
mtext("Simulated", side=2, outer=T, at=0.5)
# b.2.scatterplots
par(mfrow=c(1,2))
plot(data_aux[,1:2], col = data_aux$data_source, pch = 20)
plot(data_aux[,c(3,4)], col = data_aux$data_source, pch = 20)
mtext("Real (black) vs Simulated (red) data", side = 3, line = -1, outer = TRUE)
### is the forecast separable?
prox_points <- MDSplot(fit_rf, iris_noisy$Species, main="Proximity Plot")  #MDS plot
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
D_type = "common",nkmeans = 3, nrandom = 0)
#install.packages("EMMIXmfa")
library(knitr)
#install.packages("EMMIXmfa")
library(knitr)
#install.packages("EMMIXmfa")
library(knitr)
library(EMMIXmfa)
library(cluster)
library(factoextra)
library(tidyverse)
library(randomForest)
data(iris)
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.3,0.3,0.5,0.2))
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # nubmer of latent factors
K=3 # number of clusters
mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.3,0.3,0.5,0.2))
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # number of latent factors
K=3 # number of clusters
mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.3,0.3,0.5,0.2))
set.seed(12345)
#a.1. Fit a mixture of factor analysers with M = 2 and K = 3 for the first four columns
#of iris
M=2 # number of latent factors
K=3 # number of clusters
mfa_mod<-mfa(iris[,1:4],g=K,q=M, sigma_type = "unique",
D_type = "common",nkmeans = 3, nrandom = 0)
#a.2. extract all the corresponding parameters of the fitted model, to simulate data based
#on the model. Program simulation of Y and epsilon
#' @param N, the number of samples
#' @param mfa_model, the output of a call to mfa.
#' @return N x J matrix of simulated samples from mfa_model.
simulate_mfa <- function(N, mfa_model){
mu<-mfa_model$mu  #Jx1 xK = 4x3
B<-mfa_model$B    #JxM xK = 4x2x3
D<-diag(mfa_model$D)    #diag(JxJ x1) = 4X1
pi_prob<-mfa_model$pivec #1 xK = 1x3
M<-mfa_model$q # number of latent factors
K<-mfa_model$g # number of clusters
J<-nrow(mu) #number of orginal atributes
z <- sample(1:K,size=N,prob = pi_prob, replace = TRUE)
X = matrix(nrow = N,ncol =J )
for (i in (1:N)){
#print(i)
zi <- z[i]
Y <- rnorm(M)
error <- rnorm(J,sd=D)
X[i,]<- mu[,zi]+B[,,zi]%*%Y+ error
}
return(X)
}
#a.3. Apply simulate_mfa function to the fitted model to simulate a sample of the same
#sample size as iris.
N<-nrow(iris)
mfa.data_sim<-simulate_mfa(N,mfa_mod)
#b. Visually compare the result of this simulation against the real data to provide an
#informal goodness-of-fit assessment.
data_aux<-as.data.frame(mfa.data_sim)
colnames(data_aux)<-colnames(iris[,1:4])
data_aux<-rbind(iris[,1:4],data_aux)
data_aux<-cbind(data_aux,c(rep("real",N),rep("simulated",N)))
colnames(data_aux)[5]<-"data_source"
# b.1. quantile-quantile plots
qq_plots<-list()
par(mfrow=c(2,2), tcl=-0.5, family="serif", omi=c(0.2,0.2,0,0), mai=c(0.3,0.3,0.5,0.2))
